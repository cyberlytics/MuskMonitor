stages:
  - setup_db
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  COMPOSE_PROJECT_NAME: muskmonitor

setup_db:
  stage: setup_db
  image: docker:latest
  services:
    - docker:27.0-dind
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)

    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - ssh-keyscan 130.61.36.199 >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Clean up old files before copying new ones
    - 'ssh -o StrictHostKeyChecking=no ubuntu@130.61.36.199 "sudo rm -rf /opt/muskmonitor/sys-src"'
    # Copy the files to the server using scp
    - 'scp -o StrictHostKeyChecking=no -r sys-src ubuntu@130.61.36.199:/opt/muskmonitor'
    # SSH into the server and run docker compose
    # Setup sharding for MongoDB beforehand, because it takes a while. It's only really important that the volumes
    # contain the configs so that the sharding is already working when starting the containers in the 'deploy'-stage.
    # Without this setup the default timeout of 30 seconds would be reached by clients in the backend container
    # timing out their connections.
    - 'ssh -o StrictHostKeyChecking=no ubuntu@130.61.36.199 "cd /opt/muskmonitor/sys-src && sudo docker compose -f mongodb-sharding.yml down && sudo docker compose -f mongodb-sharding.yml up -d --build && sudo docker compose exec stock-db-config-server sh -c \"mongosh < /scripts/init-configserver.js\" && sudo docker compose exec stock-db-shard01-a sh -c \"mongosh < /scripts/init-shard01.js\" && sudo docker-compose exec stock-db-shard02-a sh -c \"mongosh < /scripts/init-shard02.js\" && sudo docker compose exec stock-database sh -c \"mongosh < /scripts/init-router.js\" && sudo docker compose exec stock-database sh -c \"mongosh < /scripts/init_databases_and_collections.js --port 27017\" && sudo docker compose -f mongodb-sharding.yml down"'
  only:
    - main

build:
  stage: build
  image: docker:latest
  services:
    - docker:27-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker info
  script:
    # Build the Docker images locally
    - docker build -t react-frontend:latest -f sys-src/muskmonitor-frontend/Dockerfile sys-src/muskmonitor-frontend
    - docker build -t flask-backend:latest -f sys-src/muskmonitor-backend/Dockerfile sys-src/muskmonitor-backend
    - docker build -t nginx:latest -f sys-src/nginx/Dockerfile sys-src/nginx
  only:
    - main

test:
  stage: test
  image: docker:latest
  services:
    - docker:27-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    # Add all containers in the testing phase to a Docker network so that they can communicate with
    # each other through names (e.g. mongodb://stock-database). A Docker-Compose file automatically
    # creates and adds all contained services to a temporary Docker network.
    - docker network create temp_test_network
    # Run database service
    - docker run -d --net temp_test_network --name vector-database cr.weaviate.io/semitechnologies/weaviate
    - docker run -d --net temp_test_network --name stock-database -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=root_password mongo
    # Run Flask backend tests
    - docker build -t flask-tests -f sys-src/muskmonitor-backend/Dockerfile sys-src/muskmonitor-backend
    - docker run --rm --net temp_test_network --name flask-tests flask-tests pytest --maxfail=1 --disable-warnings

    # Run React frontend tests
    - docker build -t react-tests -f sys-src/muskmonitor-frontend/Dockerfile --target build sys-src/muskmonitor-frontend
    - docker run --rm --net temp_test_network --name react-tests react-tests npm run test -- --run

    # Cleanup
    - docker stop vector-database
    - docker rm vector-database
    - docker stop stock-database
    - docker rm stock-database
    - docker network rm temp_test_network
  only:
    - main

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:27.0-dind
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)

    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - ssh-keyscan 130.61.36.199 >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Clean up old files before copying new ones
    - 'ssh -o StrictHostKeyChecking=no ubuntu@130.61.36.199 "sudo rm -rf /opt/muskmonitor/sys-src"'
    # Copy the files to the server using scp
    - 'scp -o StrictHostKeyChecking=no -r sys-src ubuntu@130.61.36.199:/opt/muskmonitor'
    # SSH into the server and run docker compose
    - 'ssh -o StrictHostKeyChecking=no ubuntu@130.61.36.199 "cd /opt/muskmonitor/sys-src && sudo docker compose down && sudo docker compose up -d --build"'
  only:
    - main